name: Crawl4AI MCP Server CI/CD

"on":
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CRAWL4AI_VERBOSE: 'false'
  SECURITY_TEST_MODE: 'mock'
  PYTHONUNBUFFERED: '1'
  CI: 'true'
  CRAWL4AI_AVAILABLE: 'false'

jobs:
  test-suite:
    name: Complete Test Suite (All Tests)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.13']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-timeout pytest-cov psutil
        pip install fastmcp python-dotenv pydantic PyYAML tomli
        python setup_ci_mocks.py
        
    - name: Run complete test suite (mocked - fast & reliable)
      run: |
        # Run ALL tests with mocked crawl4ai - no heavy dependencies needed!
        pytest --timeout=120 --cov=. --cov-report=xml --durations=20 -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  smoke-test:
    name: Real Crawl4AI Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        python-version: ['3.13']
    needs: [test-suite]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies for crawl4ai
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libatk-bridge2.0-0 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libgbm1 libxss1 libasound2t64
        
    - name: Install full crawl4ai and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-timeout
        pip install fastmcp python-dotenv pydantic
        pip install 'crawl4ai[all]'
        python -m playwright install chromium --with-deps
        
    - name: Run minimal smoke test with real crawl4ai
      env:
        CRAWL4AI_AVAILABLE: 'true'
      run: |
        # Just run one integration test to verify real crawl4ai works
        pytest -xvs tests/test_mcp_protocol_regression.py::TestMCPProtocolRegression::test_complete_mcp_initialization_sequence --timeout=180

  frontend-tests:
    name: Frontend Build & Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run TypeScript type checking
      working-directory: ./frontend
      run: npm run typecheck
      
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint -- --quiet
      continue-on-error: true
      
    - name: Run Vitest unit tests
      working-directory: ./frontend
      run: npm run test:ci
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Check for security vulnerabilities
      working-directory: ./frontend
      run: npm audit --audit-level=high
      continue-on-error: true

  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security linter
      run: |
        bandit -r . -f txt
      continue-on-error: true
      
    - name: Check for known vulnerabilities
      run: |
        safety scan
      continue-on-error: true